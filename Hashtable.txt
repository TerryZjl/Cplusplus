#ifndef _HASH_H_
#define _HASH_H_

#include<vector>
#include<iostream>
using namespace std;

enum TYPE
{
	EXIST,
	DELETE,
	EMPTY,
};

template<class K, class V>
struct HashNode
{
	pair<K, V> _kv;
	TYPE       _state;  //标志位，表示哈希表里的状态
	HashNode()
		:_state(EMPTY)
	{}
};

template < class K, class V>
class HashTable
{
public:
	HashTable()
		:_n(0)
	{}

	bool Insert(pair<K, V>& kv)
	{
		_CheckCapacity();

		size_t i = 1;
		size_t index = kv.first%_table.size();
		while (_table[index]._state == EXIST)
		{
			if (_table[index]._kv.first == kv.first)
			{
				return false;
			}
			//二次探测
			index += i*i;
			index = index%_table.size();
			++i;

			//线性探测
			//++index;
			//if (index == _table.size())
			//{
			//	index = 0;
			//}
		}
		_table[index]._kv = kv;
		_table[index]._state = EXIST;
		++_n;
		return true;
	}
	HashNode<K, V>* Find(const K& key)
	{
		size_t index = key / _table.size();
		while (_table[index]._state != EMPTY)
		{
			if (_table[index]._kv.first == key)
			{
				if (_table[index].state == EXIST)
					return &_table[index];
			}
			++index;
			if (index == _table.size())
				index = 0;
		}
		return NULL;
	}
	bool Remove(const K& key)
	{
		HashNode<K, V>* node= Find(key);
		if (node)
		{
			node->_state == DELETE;
			return true;
		}
		
		return false;
	}
protected:
	void _CheckCapacity()
	{
		if (_table.empty())
		{
			_table.resize(Getsize(0));
			return;
		}

		if (_n * 10 / _table.size() >= 7)
		{
			size_t Size = Getsize(_table.size());
		    HashTable<K, V> _Newtable;
			_Newtable._table.resize(Size);
			for (size_t i = 0; i < _table.size(); i++)
			{
				if (_table[i]._state == EXIST)
				{
					_Newtable.Insert(_table[i]._kv);
				}
			}
			_table.swap(_Newtable._table);
		}
	}

	size_t Getsize(size_t n)
	{
		// 使用素数表对齐做哈希表的容量，降低哈希冲突
		const int _PrimeSize = 28;
		static const unsigned long _PrimeList[_PrimeSize] =
		{
			53ul,         97ul,         193ul,       389ul,       769ul,
			1543ul,       3079ul,       6151ul,      12289ul,     24593ul,
			49157ul,      98317ul,      196613ul,    393241ul,    786433ul,
			1572869ul,    3145739ul,    6291469ul,   12582917ul,  25165843ul,
			50331653ul,   100663319ul,  201326611ul, 402653189ul, 805306457ul,
			1610612741ul, 3221225473ul, 4294967291ul
		};
		size_t i = 0;
		for (i = 0; i <_PrimeSize; i++)
		{
			if (_PrimeList[i] > n)
				return _PrimeList[i];
		}
		return _PrimeList[i - 1];
	}
private:
	vector<HashNode<K, V>> _table;
	size_t _n;
};

void TestHashtable()
{
	HashTable<int, int> ht1;
	for (int i = 0; i < 54; ++i)
	{
		ht1.Insert(make_pair(i, i));
	}
	int a = 0;
}

#endif