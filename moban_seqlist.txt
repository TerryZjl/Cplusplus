#include<iostream>
#include<assert.h>
using namespace std;


template<typename T>
class Seqlist
{
public:
	Seqlist()
		:_a(NULL)
		, _size(0)
		, _capacity(0)
	{}
	void _CheckCapacity()
	{
		if (_capacity == _size)
		{
			_capacity = _capacity * 2 + 3;
			T* tmp = new T[_capacity];

			if (_a)
			{
				memcpy(tmp, _a, sizeof(T)*_size);
				delete[] _a;
			}
			_a = tmp;
		}
	}
	Seqlist(const Seqlist<T>& s)
		:_a(NULL)
		, _size(0)
		, _capacity(0)
	{
		while (_size < s._size)
		{
			PushBack(s._a[_size]);
		}
		_capacity = s._capacity;
	}

	Seqlist<T>& operator=(Seqlist<T> s)
	{
		swap(_a, s._a);
		swap(_size, s._size);
		swap(_capacity, s._capacity);
		return *this;
	}

	void PushBack(const T& x)
	{
		_CheckCapacity();
		_a[_size] = x;
		_size++;
	}

	void PopBack()
	{
		assert(_a);
		_size--;
	}

	~Seqlist()
	{
		if (_a != NULL)
		{
			delete[] _a;
			_size = _capacity = 0;
			_a = NULL;
		}
	}

	T& Front()
	{
		return _a[0];
	}

	T& Back()
	{
		return _a[_size];
	}
	size_t size()
	{
		return _size;
	}

	bool Empty()
	{
		return _a == NULL;
	}

	void print();
private:
	T* _a;
	size_t _size;
	size_t _capacity;
};

template<typename T>
void Seqlist<T>::print()
{
	for (size_t i = 0; i < _size; i++)
	{
		cout << _a[i] << " ";
	}
	cout << endl;
}